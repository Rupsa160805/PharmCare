// Handle User Input and Bot Responses
const chatContainer = document.getElementById("chat-container");
const userInput = document.getElementById("user-input");
const sendBtn = document.getElementById("send-btn");

// Predefined Bot Responses in Multiple Languages
const responses = {
    "en": {
        "hello": "Hello! How can I assist you today?",
        "location": "Please share your current location to find the nearest clinic or hospital.",
        "clinic": "IтАЩm searching for clinics near your location. Please wait a moment...",
        "language": "I can assist you in multiple languages. Which language do you prefer? (English, Hindi, Bengali, etc.)",
        "default": "I'm sorry, I didn't understand that. Can you please rephrase?"
    },
    "hi": {
        "hello": "рдирдорд╕реНрддреЗ! рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?",
        "location": "рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╕реНрдерд╛рди рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ рддрд╛рдХрд┐ рд╣рдо рдирд┐рдХрдЯрддрдо рдХреНрд▓рд┐рдирд┐рдХ рдпрд╛ рдЕрд╕реНрдкрддрд╛рд▓ рдЦреЛрдЬ рд╕рдХреЗрдВред",
        "clinic": "рдореИрдВ рдЖрдкрдХреЗ рд╕реНрдерд╛рди рдХреЗ рдкрд╛рд╕ рдХреНрд▓рд┐рдирд┐рдХ рдЦреЛрдЬ рд░рд╣рд╛ рд╣реВрдБред рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ...",
        "language": "рдореИрдВ рдХрдИ рднрд╛рд╖рд╛рдУрдВ рдореЗрдВ рдЖрдкрдХреА рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред рдЖрдк рдХреМрди рд╕реА рднрд╛рд╖рд╛ рдкрд╕рдВрдж рдХрд░рддреЗ рд╣реИрдВ? (рдЕрдВрдЧреНрд░реЗрдЬреА, рд╣рд┐рдВрджреА, рдмрдВрдЧрд╛рд▓реА рдЖрджрд┐)",
        "default": "рдореБрдЭреЗ рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореИрдВрдиреЗ рд╕рдордЭрд╛ рдирд╣реАрдВред рдХреГрдкрдпрд╛ рджреЛрдмрд╛рд░рд╛ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред"
    },
    "bn": {
        "hello": "рж╣рзНржпрж╛рж▓рзЛ! ржЖржЬ ржЖржорж┐ ржХрзАржнрж╛ржмрзЗ ржЖржкржирж╛рж░ рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░рждрзЗ ржкрж╛рж░рж┐?",
        "location": "ржирж┐ржХржЯржмрж░рзНрждрзА ржХрзНрж▓рж┐ржирж┐ржХ ржмрж╛ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓ ржЦрзБржБржЬрждрзЗ ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи ржЕржмрж╕рзНржерж╛ржи рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржиред",
        "clinic": "ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ржирзЗрж░ ржХрж╛ржЫрж╛ржХрж╛ржЫрж┐ ржХрзНрж▓рж┐ржирж┐ржХ ржЦрзБржБржЬржЫрж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...",
        "language": "ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржмрж┐ржнрж┐ржирзНржи ржнрж╛рж╖рж╛ржпрж╝ рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░рждрзЗ ржкрж╛рж░рж┐ред ржЖржкржирж┐ ржХрзЛржи ржнрж╛рж╖рж╛ ржкржЫржирзНржж ржХрж░ржмрзЗржи? (ржЗржВрж░рзЗржЬрж┐, рж╣рж┐ржирзНржжрж┐, ржмрж╛ржВрж▓рж╛ ржЗрждрзНржпрж╛ржжрж┐)",
        "default": "ржЖржорж┐ ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржПржЯрж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржмрж╛рж░ ржмрж▓рзБржиред"
    }
};

// Available Languages
const languageOptions = {
    "english": "en",
    "hindi": "hi",
    "bengali": "bn"
};

// Default Language
let userLanguage = "en";

// Doctor and Hospital Data Based on Symptoms/Problems
const doctorRecommendations = {
    "fever": {
        "doctors": ["Dr. Amit Gupta", "Dr. Riya Das"],
        "hospitals": ["Care Plus Hospital", "XYZ Medical Center"]
    },
    "cough": {
        "doctors": ["Dr. Rajesh Sharma", "Dr. Priya Sen"],
        "hospitals": ["Apollo Clinic", "MediCare Hospital"]
    },
    "diabetes": {
        "doctors": ["Dr. Anirban Mukherjee", "Dr. Sneha Roy"],
        "hospitals": ["Diabetes Care Center", "Endocrine Hospital"]
    },
    "heart": {
        "doctors": ["Dr. Arjun Malhotra", "Dr. Neha Kapoor"],
        "hospitals": ["Fortis Heart Institute", "Max Super Specialty Hospital"]
    }
};

// Handle Send Button Click
sendBtn.addEventListener("click", () => {
    const userMessage = userInput.value.trim();
    if (userMessage !== "") {
        displayMessage(userMessage, "user");

        // Process User Input
        processInput(userMessage.toLowerCase());
        userInput.value = "";
    }
});

// Display Chat Message
function displayMessage(message, sender) {
    const messageDiv = document.createElement("div");
    messageDiv.classList.add(sender === "bot" ? "bot-message" : "user-message");
    messageDiv.textContent = message;
    chatContainer.appendChild(messageDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

// Process User Input and Generate Response
function processInput(userMessage) {
    // Check if user wants to change language
    if (userMessage.includes("language") || userMessage.includes("рднрд╛рд╖рд╛") || userMessage.includes("ржнрж╛рж╖рж╛")) {
        askForLanguage();
    } 
    // Check if the user is mentioning a specific language
    else if (checkLanguage(userMessage)) {
        setLanguage(userMessage);
    } 
    // Check if the user is sharing a symptom/problem
    else if (checkSymptoms(userMessage)) {
        recommendDoctors(userMessage);
    } 
    // Handle predefined responses based on language
    else if (responses[userLanguage][userMessage]) {
        displayMessage(responses[userLanguage][userMessage], "bot");
    } 
    // Default fallback
    else {
        displayMessage(responses[userLanguage]["default"], "bot");
    }
}

// Check if the User Mentioned a Language
function checkLanguage(message) {
    const languages = Object.keys(languageOptions);
    for (const lang of languages) {
        if (message.includes(lang)) {
            return lang;
        }
    }
    return false;
}

// Set User's Preferred Language
function setLanguage(lang) {
    const langKey = languageOptions[lang];
    if (langKey) {
        userLanguage = langKey;
        displayMessage(`тЬЕ ${capitalizeFirstLetter(lang)} selected. I will assist you in this language now.`, "bot");
        displayMessage(responses[userLanguage]["hello"], "bot"); // Greeting in selected language
    } else {
        displayMessage("I'm sorry, I don't support that language yet. Continuing in English.", "bot");
    }
}

// Ask for Preferred Language
function askForLanguage() {
    displayMessage(responses[userLanguage]["language"], "bot");
}

// Check for Symptoms/Problem in User Input
function checkSymptoms(message) {
    const symptoms = Object.keys(doctorRecommendations);
    for (const symptom of symptoms) {
        if (message.includes(symptom)) {
            return symptom;
        }
    }
    return false;
}

// Recommend Doctors and Hospitals Based on Symptoms
function recommendDoctors(message) {
    const symptom = checkSymptoms(message);
    if (symptom) {
        const recommendation = doctorRecommendations[symptom];
        displayMessage(
            userLanguage === "hi"
                ? "рдЖрдкрдХреЗ рд▓рдХреНрд╖рдгреЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдореИрдВ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рдбреЙрдХреНрдЯрд░реЛрдВ рд╕реЗ рдкрд░рд╛рдорд░реНрд╢ рдХрд░рдиреЗ рдХреА рд╕рд▓рд╛рд╣ рджреЗрддрд╛ рд╣реВрдБ:"
                : userLanguage === "bn"
                ? "ржЖржкржирж╛рж░ рж▓ржХрзНрж╖ржгржЧрзБрж▓рж┐рж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ, ржЖржорж┐ ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржбрж╛ржХрзНрждрж╛рж░ржжрзЗрж░ рж╕рж╛ржерзЗ ржкрж░рж╛ржорж░рзНрж╢ ржХрж░рж╛рж░ ржкрж░рж╛ржорж░рзНрж╢ ржжрж┐ржЪрзНржЫрж┐:"
                : "Based on your symptoms, I recommend consulting the following doctors:",
            "bot"
        );

        recommendation.doctors.forEach((doctor, index) => {
            displayMessage(`${index + 1}. ${doctor} - Available at ${recommendation.hospitals[index]}`, "bot");
        });
    } else {
        displayMessage(responses[userLanguage]["default"], "bot");
    }
}

// Capitalize First Letter of Text
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

// Get User Location
function getLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                const latitude = position.coords.latitude;
                const longitude = position.coords.longitude;
                displayMessage(`ЁЯУН Searching for clinics near (${latitude}, ${longitude})...`, "bot");
                findClinics(latitude, longitude);
            },
            () => {
                displayMessage(
                    userLanguage === "hi"
                        ? "рд╕реНрдерд╛рди рд╕реЗрд╡рд╛рдПрдВ рд╕рдХреНрд╖рдо рдХрд░реЗрдВред"
                        : userLanguage === "bn"
                        ? "ржЕржмрж╕рзНржерж╛ржи ржкрж░рж┐рж╖рзЗржмрж╛ рж╕ржХрзНрж╖ржо ржХрж░рзБржиред"
                        : "Please enable location services.",
                    "bot"
                );
            }
        );
    } else {
        displayMessage(
            userLanguage === "hi"
                ? "рдпрд╣ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рд╕реНрдерд╛рди рд╕реЗрд╡рд╛рдУрдВ рдХрд╛ рд╕рдорд░реНрдерди рдирд╣реАрдВ рдХрд░рддрд╛ред"
                : userLanguage === "bn"
                ? "ржПржЗ ржмрзНрж░рж╛ржЙржЬрж╛рж░ ржЕржмрж╕рзНржерж╛ржи ржкрж░рж┐рж╖рзЗржмрж╛ рж╕ржорж░рзНржержи ржХрж░рзЗ ржирж╛ред"
                : "Geolocation is not supported by this browser.",
            "bot"
        );
    }
}

// Dummy Function to Find Clinics (Add API later)
function findClinics(lat, lng) {
    setTimeout(() => {
        displayMessage(
            userLanguage === "hi"
                ? "рдЖрдкрдХреЗ рд╕реНрдерд╛рди рдХреЗ рдкрд╛рд╕ 3 рдХреНрд▓рд┐рдирд┐рдХ рдорд┐рд▓реЗред"
                : userLanguage === "bn"
                ? "ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ржирзЗрж░ ржирж┐ржХржЯрзЗ рзйржЯрж┐ ржХрзНрж▓рж┐ржирж┐ржХ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗред"
                : "Found 3 clinics near your location. Check the list below:",
            "bot"
        );
        displayMessage("1. ABC Diagnostics\n2. XYZ Medical Center\n3. Care Plus Hospital", "bot");
    }, 2000);
}
