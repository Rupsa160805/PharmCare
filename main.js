// Default language is English
let selectedLanguage = "en";

// Translations for multilingual support
const translations = {
    en: {
        greeting: "Hello! How can I assist you today? ЁЯШК",
        thanks: "You're welcome! Let me know if you need any more help. ЁЯдЧ",
        sorry: "No worries! How can I assist you? ЁЯШК",
        switchEnglish: "I will now respond in English.",
        switchHindi: "рдЕрдм рд╕реЗ рдореИрдВ рд╣рд┐рдВрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреВрдВрдЧрд╛ред",
        switchBengali: "ржПржЦржи ржерзЗржХрзЗ ржЖржорж┐ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрзЗржмред",
        doctorIntro: "Here are some recommended doctors for",
        hospitalIntro: "Here are some hospitals for this specialization:",
        notUnderstood: "I didn't understand. Please mention a health issue or ask for a doctor."
    },
    hi: {
        greeting: "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдЬ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ? ЁЯШК",
        thanks: "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдореБрдЭреЗ рдмрддрд╛рдЗрдП рдХрд┐ рдХреНрдпрд╛ рдореИрдВ рдФрд░ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред ЁЯдЧ",
        sorry: "рдХреЛрдИ рдмрд╛рдд рдирд╣реАрдВ! рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рд╕рд╣рд╛рдпрддрд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ? ЁЯШК",
        switchEnglish: "рдЕрдм рдореИрдВ рдЕрдВрдЧреНрд░реЗрдЬрд╝реА рдореЗрдВ рдЙрддреНрддрд░ рджреВрдБрдЧрд╛ред",
        switchHindi: "рдЕрдм рд╕реЗ рдореИрдВ рд╣рд┐рдВрджреА рдореЗрдВ рдЬрд╡рд╛рдм рджреВрдВрдЧрд╛ред",
        switchBengali: "рдЕрдм рд╕реЗ рдореИрдВ рдмрдВрдЧрд╛рд▓реА рдореЗрдВ рдЙрддреНрддрд░ рджреВрдБрдЧрд╛ред",
        doctorIntro: "рдпрд╣рд╛рдБ рдХреБрдЫ рдЕрдиреБрд╢рдВрд╕рд┐рдд рдбреЙрдХреНрдЯрд░ рд╣реИрдВ",
        hospitalIntro: "рдЗрд╕ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮрддрд╛ рдХреЗ рд▓рд┐рдП рдХреБрдЫ рдЕрд╕реНрдкрддрд╛рд▓ рд╣реИрдВ:",
        notUnderstood: "рдореБрдЭреЗ рд╕рдордЭ рдирд╣реАрдВ рдЖрдпрд╛ред рдХреГрдкрдпрд╛ рдХрд┐рд╕реА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛ рдХрд╛ рдЙрд▓реНрд▓реЗрдЦ рдХрд░реЗрдВ рдпрд╛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рдкреВрдЫреЗрдВред"
    },
    bn: {
        greeting: "рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ ржЖржЬ ржЖржкржирж╛ржХрзЗ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐? ЁЯШК",
        thanks: "ржЖржкржирж╛рж░ рж╕рзНржмрж╛ржЧрждржо! ржЖржорж╛ржХрзЗ ржЬрж╛ржирж╛ржи ржпржжрж┐ ржЖрж░ржУ рж╕рж╛рж╣рж╛ржпрзНржп ржкрзНрж░ржпрж╝рзЛржЬржи рж╣ржпрж╝ред ЁЯдЧ",
        sorry: "ржХрзЛржиржУ рж╕ржорж╕рзНржпрж╛ ржирзЗржЗ! ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐? ЁЯШК",
        switchEnglish: "ржЖржорж┐ ржПржЦржи ржЗржВрж░рзЗржЬрж┐рждрзЗ ржЙрждрзНрждрж░ ржжрзЗржмред",
        switchHindi: "ржЖржорж┐ ржПржЦржи рж╣рж┐ржирзНржжрж┐рждрзЗ ржЙрждрзНрждрж░ ржжрзЗржмред",
        switchBengali: "ржПржЦржи ржерзЗржХрзЗ ржЖржорж┐ ржмрж╛ржВрж▓рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрзЗржмред",
        doctorIntro: "ржПржЦрж╛ржирзЗ ржХрж┐ржЫрзБ рж╕рзБржкрж╛рж░рж┐рж╢ржХрзГржд ржбрж╛ржХрзНрждрж╛рж░ ржЖржЫрзЗржи",
        hospitalIntro: "ржПржЗ ржмрж┐рж╢рзЗрж╖рж╛ржпрж╝ржирзЗрж░ ржЬржирзНржп ржХрж┐ржЫрзБ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓:",
        notUnderstood: "ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕ржорж╕рзНржпрж╛ ржЙрж▓рзНрж▓рзЗржЦ ржХрж░рзБржи ржмрж╛ ржбрж╛ржХрзНрждрж╛рж░ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржиред"
    }
};

// Function to get translated text based on selected language
function translate(key) {
    return translations[selectedLanguage][key];
}

// Chatbot Initialization
document.addEventListener("DOMContentLoaded", () => {
    document.getElementById("send-btn").addEventListener("click", processUserInput);
    document.getElementById("user-input").addEventListener("keypress", (event) => {
        if (event.key === "Enter") processUserInput();
    });
});

// Process User Input
function processUserInput() {
    const userInputField = document.getElementById("user-input");
    const userText = userInputField.value.trim().toLowerCase();

    if (!userText) return;

    displayMessage(userText, "user");
    userInputField.value = "";

    // Language Switching
    if (userText.includes("hindi")) {
        selectedLanguage = "hi";
        displayMessage(translate("switchHindi"), "bot");
        return;
    } else if (userText.includes("bengali")) {
        selectedLanguage = "bn";
        displayMessage(translate("switchBengali"), "bot");
        return;
    } else if (userText.includes("english")) {
        selectedLanguage = "en";
        displayMessage(translate("switchEnglish"), "bot");
        return;
    }

    // Detect Health Issues
    for (const keyword in healthConditions) {
        if (userText.includes(keyword)) {
            const specialization = healthConditions[keyword];
            displayMessage(`${translate("doctorIntro")} ${specialization}:`, "bot");
            fetchDoctors(specialization);
            fetchNearbyHospitals(specialization);
            return;
        }
    }

    // Friendly Responses
    if (userText.includes("hello") || userText.includes("hi")) {
        displayMessage(translate("greeting"), "bot");
        return;
    }
    if (userText.includes("thanks") || userText.includes("thank you")) {
        displayMessage(translate("thanks"), "bot");
        return;
    }
    if (userText.includes("sorry")) {
        displayMessage(translate("sorry"), "bot");
        return;
    }

    // Default Response
    displayMessage(translate("notUnderstood"), "bot");
}

// Display Messages in Chat
function displayMessage(message, sender) {
    const chatContainer = document.getElementById("chat-container");
    const messageDiv = document.createElement("div");
    messageDiv.classList.add(sender === "user" ? "user-message" : "bot-message");
    messageDiv.textContent = message;
    chatContainer.appendChild(messageDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

// Fetch Doctor Details
function fetchDoctors(specialization) {
    displayMessage(doctors[specialization].map(doc => `ЁЯСитАНтЪХя╕П ${doc.name} (Fee: ${doc.fee})`).join("\n"), "bot");
}

// Fetch Nearby Hospitals
function fetchNearbyHospitals(specialization) {
    displayMessage(translate("hospitalIntro"), "bot");
    displayMessage(hospitals[specialization].join("\n"), "bot");
}
