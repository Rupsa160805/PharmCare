// Store user's selected language (default: English)
let userLanguage = "en";

// Health Conditions Mapping
const healthConditions = {
    "heart": { specialist: "Cardiologist", key: "heart_disease" },
    "bones": { specialist: "Orthopedic", key: "bone_issue" },
    "nerves": { specialist: "Neurologist", key: "nerve_issue" },
    "cancer": { specialist: "Oncologist", key: "cancer_issue" },
    "skin": { specialist: "Dermatologist", key: "skin_issue" },
    "pulmonary": { specialist: "Pulmonologist", key: "pulmonary_issue" },
    "fever": { specialist: "General Physician", key: "general_physician_issue" },
    "women": { specialist: "Gynecologist", key: "women_issue" }
};

// Doctor Recommendations
const doctors = {
    "Cardiologist": ["Dr. Rajesh Sharma", "Dr. Sunita Verma"],
    "Orthopedic": ["Dr. Anil Kumar", "Dr. Rakesh Mehta"],
    "Neurologist": ["Dr. Neha Das", "Dr. Vikram Singh"],
    "Oncologist": ["Dr. Priya Malhotra", "Dr. Arvind Joshi"],
    "Dermatologist": ["Dr. Sneha Kapoor", "Dr. Pooja Reddy"],
    "Pulmonologist": ["Dr. Aman Tripathi", "Dr. Ritu Sharma"],
    "General Physician": ["Dr. Sanjay Gupta", "Dr. Meera Kapoor"],
    "Gynecologist": ["Dr. Ananya Ghosh", "Dr. Shweta Nair"]
};

// Multilingual Responses
const responses = {
    "en": {
        "greeting": "Hello! How can I assist you today?",
        "thanks": "You're welcome! Stay healthy.",
        "sorry": "No worries! How can I assist you?",
        "language": "I can assist you in multiple languages. Which language do you prefer? (English, Hindi, Bengali)",
        "location": "Fetching your location to find nearby hospitals...",
        "hospital": "Searching for nearby hospitals for medical tests and checkups...",
        "ask_disease": "Please mention your disease or symptoms so I can suggest suitable doctors and hospitals.",
        "default": "I'm sorry, I didn't understand that. Can you please rephrase?"
    },
    "hi": {
        "greeting": "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?",
        "thanks": "‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§∏‡•ç‡§µ‡§∏‡•ç‡§• ‡§∞‡§π‡•á‡§Ç‡•§",
        "sorry": "‡§ï‡•ã‡§à ‡§¨‡§æ‡§§ ‡§®‡§π‡•Ä‡§Ç! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡§ø‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?",
        "language": "‡§Æ‡•à‡§Ç ‡§ï‡§à ‡§≠‡§æ‡§∑‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™ ‡§ï‡§ø‡§∏ ‡§≠‡§æ‡§∑‡§æ ‡§ï‡•ã ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç? (‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä, ‡§π‡§ø‡§Ç‡§¶‡•Ä, ‡§¨‡§Ç‡§ó‡§æ‡§≤‡•Ä)",
        "location": "‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§ñ‡•ã‡§ú ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å ‡§§‡§æ‡§ï‡§ø ‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§Æ‡§ø‡§≤ ‡§∏‡§ï‡•á...",
        "hospital": "‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§î‡§∞ ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ñ‡•ã‡§ú ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...",
        "ask_disease": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§∞‡•ã‡§ó ‡§Ø‡§æ ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡•ã‡§Ç ‡§î‡§∞ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤‡•ã‡§Ç ‡§ï‡§æ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á ‡§∏‡§ï‡•Ç‡§Ç‡•§",
        "default": "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•à‡§Ç ‡§á‡§∏‡•á ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§™‡§æ‡§Ø‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§π‡§∞‡§æ‡§è‡§Å‡•§"
    },
    "bn": {
        "greeting": "‡¶®‡¶Æ‡¶∏‡ßç‡¶ï‡¶æ‡¶∞! ‡¶Ü‡¶Æ‡¶ø ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?",
        "thanks": "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶∏‡ßÅ‡¶∏‡ßç‡¶• ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®‡•§",
        "sorry": "‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶®‡ßá‡¶á! ‡¶Ü‡¶Æ‡¶ø ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?",
        "language": "‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶® ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶ï‡¶∞‡ßá‡¶®? (‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø, ‡¶π‡¶ø‡¶®‡ßç‡¶¶‡¶ø, ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)",
        "location": "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø ‡¶Ø‡¶æ‡¶§‡ßá ‡¶ï‡¶æ‡¶õ‡ßá‡¶∞ ‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º...",
        "hospital": "‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶õ‡ßá‡¶∞ ‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø...",
        "ask_disease": "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡ßã‡¶ó ‡¶¨‡¶æ ‡¶≤‡¶ï‡ßç‡¶∑‡¶£ ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡¶æ‡¶§‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞ ‡¶ì ‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤ ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§",
        "default": "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ü‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶¨‡¶≤‡ßÅ‡¶®‡•§"
    }
};

// Ensure chatbot initializes properly
document.addEventListener("DOMContentLoaded", () => {
    console.log("‚úÖ Chatbot script loaded successfully.");

    const sendButton = document.getElementById("send-btn");
    const userInput = document.getElementById("user-input");
    const chatContainer = document.getElementById("chat-container");

    if (!sendButton || !userInput || !chatContainer) {
        console.error("‚ùå Error: Missing chatbot elements in HTML.");
        return;
    }

    sendButton.addEventListener("click", processUserInput);
    userInput.addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
            event.preventDefault();
            processUserInput();
        }
    });

    console.log("‚úÖ Chatbot event listeners initialized.");
});

// Function to Process User Input
function processUserInput() {
    const userInputField = document.getElementById("user-input");
    const userMessage = userInputField.value.trim();

    if (!userMessage) return;

    console.log("üí¨ User input received:", userMessage);

    appendMessage("user", userMessage);
    userInputField.value = ""; // Clear input field

    setTimeout(() => {
        generateBotResponse(userMessage);
    }, 500); // Slight delay for a natural interaction
}

// Function to Append Messages to Chat
function appendMessage(sender, message) {
    const chatContainer = document.getElementById("chat-container");
    const messageDiv = document.createElement("div");

    messageDiv.classList.add(sender === "user" ? "user-message" : "bot-message");
    messageDiv.innerHTML = message;
    chatContainer.appendChild(messageDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight; // Auto-scroll to latest message

    console.log(`‚úÖ Message appended: [${sender}] ${message}`);
}

// Function to Generate Chatbot Response
function generateBotResponse(userInput) {
    const lowerInput = userInput.toLowerCase();
    let botResponse = responses[userLanguage]["default"];

    // Language Selection
    if (lowerInput.includes("language")) {
        botResponse = responses[userLanguage]["language"];
    } else if (lowerInput.includes("english")) {
        userLanguage = "en";
        botResponse = "Language set to English.";
    } else if (lowerInput.includes("hindi")) {
        userLanguage = "hi";
        botResponse = "‡§≠‡§æ‡§∑‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡•Ä ‡§ó‡§à‡•§";
    } else if (lowerInput.includes("bengali") || lowerInput.includes("bangla")) {
        userLanguage = "bn";
        botResponse = "‡¶≠‡¶æ‡¶∑‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§";
    } 
    // Greeting Responses
    else if (lowerInput.includes("hello") || lowerInput.includes("hi")) {
        botResponse = responses[userLanguage]["greeting"];
    } else if (lowerInput.includes("thanks") || lowerInput.includes("thank you")) {
        botResponse = responses[userLanguage]["thanks"];
    } else if (lowerInput.includes("sorry")) {
        botResponse = responses[userLanguage]["sorry"];
    } 
    // Health Issue Recognition
    else {
        for (let key in healthConditions) {
            if (lowerInput.includes(key)) {
                const condition = healthConditions[key];
                const specialist = condition.specialist;
                const doctorList = doctors[specialist] || ["No doctor found"];

                botResponse = `‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá **${specialist}** ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§<br>
                ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂‡¶ï‡ßÉ‡¶§ ‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞:<br>${doctorList.join("<br>")}`;

                // Find nearby hospitals
                findNearbyHospitals();
                break;
            }
        }
    }

    appendMessage("bot", botResponse);
}

// Function to Detect User's Location and Find Nearby Hospitals
async function findNearbyHospitals() {
    appendMessage("bot", responses[userLanguage]["location"]);

    try {
        const searchResults = await web.search("hospitals near me");

        if (searchResults && searchResults.length > 0) {
            let hospitalList = searchResults.slice(0, 3).map((hospital, index) => `${index + 1}. ${hospital.title}`).join("<br>");
            appendMessage("bot", hospitalList);
        }
    } catch (error) {
        appendMessage("bot", "Sorry, unable to fetch hospital details.");
    }
}
