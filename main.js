// Handle User Input and Bot Responses
const chatContainer = document.getElementById("chat-container");
const userInput = document.getElementById("user-input");
const sendBtn = document.getElementById("send-btn");

// Predefined Bot Responses in Multiple Languages
const responses = {
    "en": {
        "hello": "Hello! How may I assist you today? I can help you with finding nearby hospitals, clinics, or medical tests.",
        "location": "Please share your current location to find the nearest clinic or hospital.",
        "clinic": "I‚Äôm searching for clinics near your location. Please wait a moment...",
        "language": "I can assist you in multiple languages. Which language do you prefer? (English, Hindi, Bengali, etc.)",
        "hospital": "Searching for nearby hospitals or clinics for medical tests and health checkups...",
        "confirm_lang": "You have selected English. Would you like to proceed in this language? (Yes/No)",
        "retry_lang": "Okay, please mention your preferred language again.",
        "feedback": "Did I help you find the information you were looking for? (Yes/No)",
        "thank_you": "You're welcome! I'm happy to assist you anytime. üòä",
        "sorry": "No worries at all! Let me know how I can assist you further. üòä",
        "default": "I'm sorry, I didn't understand that. Can you please rephrase?"
    },
    "hi": {
        "hello": "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡§ø‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å? ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤, ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï ‡§Ø‡§æ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§ñ‡•ã‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§",
        "location": "‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§∏‡•ç‡§•‡§æ‡§® ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§π‡§Æ ‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï ‡§Ø‡§æ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ñ‡•ã‡§ú ‡§∏‡§ï‡•á‡§Ç‡•§",
        "clinic": "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï ‡§ñ‡•ã‡§ú ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•ç‡§∞‡§§‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§∞‡•á‡§Ç...",
        "language": "‡§Æ‡•à‡§Ç ‡§ï‡§à ‡§≠‡§æ‡§∑‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™ ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§™‡§∏‡§Ç‡§¶ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç? (‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä, ‡§π‡§ø‡§Ç‡§¶‡•Ä, ‡§¨‡§Ç‡§ó‡§æ‡§≤‡•Ä ‡§Ü‡§¶‡§ø)",
        "hospital": "‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§î‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ñ‡•ã‡§ú ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å...",
        "confirm_lang": "‡§Ü‡§™‡§®‡•á ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§á‡§∏ ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á? (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)",
        "retry_lang": "‡§†‡•Ä‡§ï ‡§π‡•à, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§â‡§≤‡•ç‡§≤‡•á‡§ñ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "feedback": "‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ü‡§™‡§ï‡•ã ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ñ‡•ã‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•Ä? (‡§π‡§æ‡§Å/‡§®‡§π‡•Ä‡§Ç)",
        "thank_you": "‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞‡§ï‡•á ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•Å‡§à‡•§ üòä",
        "sorry": "‡§ï‡•ã‡§à ‡§¨‡§æ‡§§ ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•Å‡§ù‡•á ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§ üòä",
        "default": "‡§Æ‡•Å‡§ù‡•á ‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•à‡§Ç‡§®‡•á ‡§∏‡§Æ‡§ù‡§æ ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
    },
    "bn": {
        "hello": "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶ú ‡¶Ü‡¶Æ‡¶ø ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø? ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ï‡¶æ‡¶õ‡¶æ‡¶ï‡¶æ‡¶õ‡¶ø ‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤, ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶ø‡¶ï ‡¶¨‡¶æ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§",
        "location": "‡¶®‡¶ø‡¶ï‡¶ü‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶ø‡¶ï ‡¶¨‡¶æ ‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶§‡ßá ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        "clinic": "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡¶æ‡¶ï‡¶æ‡¶õ‡¶ø ‡¶ï‡ßç‡¶≤‡¶ø‡¶®‡¶ø‡¶ï ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...",
        "language": "‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶¨‡¶ø‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßã‡¶® ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶™‡¶õ‡¶®‡ßç‡¶¶ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®? (‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø, ‡¶π‡¶ø‡¶®‡ßç‡¶¶‡¶ø, ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø)",
        "hospital": "‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶õ‡¶æ‡¶ï‡¶æ‡¶õ‡¶ø ‡¶π‡¶æ‡¶∏‡¶™‡¶æ‡¶§‡¶æ‡¶≤ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø...",
        "confirm_lang": "‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶è‡¶á ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶ö‡¶æ‡¶≤‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡ßá‡¶§‡ßá ‡¶ö‡¶æ‡¶®? (‡¶π‡ßç‡¶Ø‡¶æ‡¶Å/‡¶®‡¶æ)",
        "retry_lang": "‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§",
        "feedback": "‡¶Ü‡¶Æ‡¶ø ‡¶ï‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡ßá‡¶∞‡ßá‡¶õ‡¶ø? (‡¶π‡ßç‡¶Ø‡¶æ‡¶Å/‡¶®‡¶æ)",
        "thank_you": "‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡ßá‡¶∞‡ßá ‡¶ñ‡ßÅ‡¶∂‡¶ø‡•§ üòä",
        "sorry": "‡¶ï‡ßã‡¶® ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶®‡ßá‡¶á‡•§ ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶® ‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ üòä",
        "default": "‡¶Ü‡¶Æ‡¶ø ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ü‡¶ø ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶≤‡ßÅ‡¶®‡•§"
    }
};

// Available Languages
const languageOptions = {
    "english": "en",
    "hindi": "hi",
    "bengali": "bn"
};

// Default Language
let userLanguage = "en";
let waitingForLangConfirmation = false;
let waitingForFeedback = false;

// Predefined List of Hospitals with Coordinates and Specialties
const hospitalData = [
    { name: "Apollo Hospital", address: "Kolkata, West Bengal", lat: 22.5726, lng: 88.3639, specialties: ["cardiology", "neurology", "orthopedics"] },
    { name: "Fortis Hospital", address: "Kolkata, West Bengal", lat: 22.5795, lng: 88.4336, specialties: ["oncology", "urology", "nephrology"] },
    { name: "AMRI Hospital", address: "Dhakuria, Kolkata", lat: 22.5124, lng: 88.3709, specialties: ["gastroenterology", "pulmonology", "cardiology"] },
    { name: "Ruby General Hospital", address: "Kolkata, West Bengal", lat: 22.5154, lng: 88.4076, specialties: ["orthopedics", "gynecology", "pediatrics"] },
    { name: "Narayana Hospital", address: "Howrah, West Bengal", lat: 22.5958, lng: 88.2636, specialties: ["cardiology", "oncology", "neurology"] }
];

// List of Recognized Diseases and Related Specialties
const diseaseSpecialties = {
    "heart": "cardiology",
    "cancer": "oncology",
    "kidney": "nephrology",
    "lungs": "pulmonology",
    "bone": "orthopedics",
    "brain": "neurology",
    "stomach": "gastroenterology",
    "women": "gynecology",
    "children": "pediatrics"
};

// Initial Greeting and Language Setup
function greetUser() {
    displayMessage(responses[userLanguage]["hello"], "bot");
    setTimeout(askForLanguage, 2000);
}

// Send Button Event Listener
sendBtn.addEventListener("click", () => {
    const userMessage = userInput.value.trim();
    if (userMessage !== "") {
        displayMessage(userMessage, "user");
        processInput(userMessage.toLowerCase());
        userInput.value = "";
    }
});

// Display Chat Message
function displayMessage(message, sender) {
    const messageDiv = document.createElement("div");
    messageDiv.classList.add(sender === "bot" ? "bot-message" : "user-message");
    messageDiv.textContent = message;
    chatContainer.appendChild(messageDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

// Process User Input and Generate Response
function processInput(userMessage) {
    if (waitingForLangConfirmation) {
        handleLangConfirmation(userMessage);
        return;
    }

    if (waitingForFeedback) {
        handleFeedback(userMessage);
        return;
    }

    const disease = checkForDisease(userMessage);

    if (disease) {
        getLocationForHospitals(disease);
    } 
    else if (userMessage.includes("language") || userMessage.includes("‡§≠‡§æ‡§∑‡§æ") || userMessage.includes("‡¶≠‡¶æ‡¶∑‡¶æ")) {
        askForLanguage();
    } 
    else if (checkLanguage(userMessage)) {
        confirmLanguage(userMessage);
    } 
    else if (userMessage.includes("hospital") || userMessage.includes("clinic") || userMessage.includes("test")) {
        getLocationForHospitals();
    } 
    else if (userMessage.includes("thank") || userMessage.includes("thanks") || userMessage.includes("‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶") || userMessage.includes("‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶")) {
        displayMessage(responses[userLanguage]["thank_you"], "bot");
    } 
    else if (userMessage.includes("sorry") || userMessage.includes("apology") || userMessage.includes("‡§Æ‡§æ‡§´‡§º ‡§ï‡•Ä‡§ú‡§ø‡§è") || userMessage.includes("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§")) {
        displayMessage(responses[userLanguage]["sorry"], "bot");
    }
    else if (responses[userLanguage][userMessage]) {
        displayMessage(responses[userLanguage][userMessage], "bot");
    } 
    else {
        displayMessage(responses[userLanguage]["default"], "bot");
    }
}

// Handle Language Confirmation
function handleLangConfirmation(response) {
    if (response.includes("yes") || response.includes("‡§π‡§æ‡§Å") || response.includes("‡¶π‡ßç‡¶Ø‡¶æ‡¶Å")) {
        displayMessage(responses[userLanguage]["hello"], "bot");
    } else {
        displayMessage(responses[userLanguage]["retry_lang"], "bot");
        askForLanguage();
    }
    waitingForLangConfirmation = false;
}

// Handle User Feedback
function handleFeedback(response) {
    if (response.includes("yes") || response.includes("‡§π‡§æ‡§Å") || response.includes("‡¶π‡ßç‡¶Ø‡¶æ‡¶Å")) {
        displayMessage(
            userLanguage === "hi"
                ? "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞‡§ï‡•á ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•Å‡§à‡•§"
                : userLanguage === "bn"
                ? "‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡ßá‡¶∞‡ßá ‡¶ñ‡ßÅ‡¶∂‡¶ø‡•§"
                : "Thank you! I'm happy to have helped. üòä",
            "bot"
        );
    } else {
        displayMessage(
            userLanguage === "hi"
                ? "‡§Æ‡•Å‡§ù‡•á ‡§ñ‡•á‡§¶ ‡§π‡•à ‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§æ‡•§"
                : userLanguage === "bn"
                ? "‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶§‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§"
                : "I'm sorry I couldn't assist you better. üòî",
            "bot"
        );
    }
    waitingForFeedback = false;
}

// Ask for Language Preference
function askForLanguage() {
    displayMessage(responses[userLanguage]["language"], "bot");
}

// Check if User Mentioned a Disease
function checkForDisease(message) {
    for (const disease in diseaseSpecialties) {
        if (message.includes(disease)) {
            return diseaseSpecialties[disease];
        }
    }
    return null;
}

// Confirm User's Preferred Language
function confirmLanguage(lang) {
    const langKey = languageOptions[lang];
    if (langKey) {
        userLanguage = langKey;
        waitingForLangConfirmation = true;
        displayMessage(responses[userLanguage]["confirm_lang"], "bot");
    } else {
        displayMessage("I'm sorry, that language is not supported yet.", "bot");
    }
}

// Get User Location for Hospitals/Clinics Based on Disease
function getLocationForHospitals(specialty = null) {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                const latitude = position.coords.latitude;
                const longitude = position.coords.longitude;
                displayMessage(responses[userLanguage]["hospital"], "bot");
                findNearbyHospitals(latitude, longitude, specialty);
            },
            () => {
                displayMessage(
                    userLanguage === "hi"
                        ? "‡§∏‡•ç‡§•‡§æ‡§® ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡§∞‡•á‡§Ç‡•§"
                        : userLanguage === "bn"
                        ? "‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶™‡¶∞‡¶ø‡¶∑‡ßá‡¶¨‡¶æ ‡¶∏‡¶ï‡ßç‡¶∑‡¶Æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
                        : "Please enable location services.",
                    "bot"
                );
            }
        );
    } else {
        displayMessage(
            userLanguage === "hi"
                ? "‡§Ø‡§π ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§∏‡•ç‡§•‡§æ‡§® ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§∏‡§Æ‡§∞‡•ç‡§•‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§"
                : userLanguage === "bn"
                ? "‡¶è‡¶á ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶™‡¶∞‡¶ø‡¶∑‡ßá‡¶¨‡¶æ ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶® ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ‡•§"
                : "Geolocation is not supported by this browser.",
            "bot"
        );
    }
}

// Find Nearby Hospitals Based on User Location and Disease Specialty
function findNearbyHospitals(lat, lng, specialty = null) {
    let hospitalsWithDistance = hospitalData.map((hospital) => {
        const distance = calculateDistance(lat, lng, hospital.lat, hospital.lng);
        return { ...hospital, distance };
    });

    // Filter Hospitals Based on Specialty if Provided
    if (specialty) {
        hospitalsWithDistance = hospitalsWithDistance.filter((hospital) =>
            hospital.specialties.includes(specialty)
        );
    }

    hospitalsWithDistance.sort((a, b) => a.distance - b.distance);

    if (hospitalsWithDistance.length > 0) {
        const introMessage =
            specialty
                ? `Here are the hospitals specializing in ${specialty} near your location:`
                : "Here are the hospitals near your location:";

        displayMessage(introMessage, "bot");

        hospitalsWithDistance.slice(0, 3).forEach((hospital, index) => {
            displayMessage(
                `${index + 1}. ${hospital.name} - ${hospital.address} (${hospital.distance.toFixed(2)} km)`,
                "bot"
            );
        });

        setTimeout(() => {
            displayMessage(responses[userLanguage]["feedback"], "bot");
            waitingForFeedback = true;
        }, 3000);
    } else {
        displayMessage("No hospitals found near your location.", "bot");
    }
}

// Calculate Distance Between Two Points Using Haversine Formula
function calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371; // Radius of Earth in kilometers
    const dLat = (lat2 - lat1) * (Math.PI / 180);
    const dLon = (lon2 - lon1) * (Math.PI / 180);

    const a =
        Math.sin(dLat / 2) ** 2 +
        Math.cos(lat1 * (Math.PI / 180)) *
            Math.cos(lat2 * (Math.PI / 180)) *
            Math.sin(dLon / 2) ** 2;

    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
}

// Greet User on Load
greetUser();
